"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1638046137183_CreateUserTable = require("./1638046137183-CreateUserTable");
const class_transformer = require("class-transformer");
const Connection = require("typeorm/connection/Connection");
const Broadcaster = require("typeorm/subscriber/Broadcaster");
const EntityManager = require("typeorm/entity-manager/EntityManager");
const typeorm = require("typeorm");
const View = require("typeorm/schema-builder/view/View");
const QueryResult = require("typeorm/query-runner/QueryResult");
const fs = require("fs");
const SqlInMemory = require("typeorm/driver/SqlInMemory");
describe('up', () => {
    let inst;
    beforeEach(() => {
        inst = new _1638046137183_CreateUserTable.CreateUserTable1638046137183();
    });
    test('0', async () => {
        let object3 = [
            class_transformer.plainToClass(typeorm.Table, {}),
            class_transformer.plainToClass(typeorm.Table, {}),
        ];
        let object2 = [
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
        ];
        let object = [
            class_transformer.plainToClass(typeorm.Table, {}),
            class_transformer.plainToClass(typeorm.Table, {}),
        ];
        await inst.up({
            connection: class_transformer.plainToClass(Connection.Connection, {}),
            broadcaster: class_transformer.plainToClass(Broadcaster.Broadcaster, {}),
            manager: class_transformer.plainToClass(EntityManager.EntityManager, {}),
            isReleased: false,
            isTransactionActive: false,
            data: { key2: 'Foo bar', key0: 'Jean-Philippe', key1: 'Hello, world!' },
            loadedTables: object,
            loadedViews: object2,
            connect: () => 'http://www.example.com/route/123?foo=bar',
            release: () => undefined,
            clearDatabase: () => undefined,
            startTransaction: () => undefined,
            commitTransaction: () => undefined,
            rollbackTransaction: () => undefined,
            query: () => class_transformer.plainToClass(QueryResult.QueryResult, {}),
            stream: () => class_transformer.plainToClass(fs.ReadStream, {}),
            getDatabases: () => [
                'Www.GooGle.com',
                'http://www.croplands.org/account/confirm?t=',
                'http://example.com/showcalendar.html?token=CKF50YzIHxCTKMAg',
            ],
            getSchemas: () => [
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
            ],
            getTable: () => undefined,
            getTables: () => object3,
            getView: () => undefined,
            getViews: () => [null],
            getReplicationMode: () => 'slave',
            hasDatabase: () => false,
            getCurrentDatabase: () => 'ponicode.com',
            hasSchema: () => false,
            getCurrentSchema: () => 'https://api.telegram.org/bot',
            hasTable: () => true,
            hasColumn: () => false,
            createDatabase: () => undefined,
            dropDatabase: () => undefined,
            createSchema: () => undefined,
            dropSchema: () => undefined,
            createTable: () => undefined,
            dropTable: () => undefined,
            createView: () => undefined,
            dropView: () => undefined,
            renameTable: () => undefined,
            addColumn: () => undefined,
            addColumns: () => undefined,
            renameColumn: () => undefined,
            changeColumn: () => undefined,
            changeColumns: () => undefined,
            dropColumn: () => undefined,
            dropColumns: () => undefined,
            createPrimaryKey: () => undefined,
            updatePrimaryKeys: () => undefined,
            dropPrimaryKey: () => undefined,
            createUniqueConstraint: () => undefined,
            createUniqueConstraints: () => undefined,
            dropUniqueConstraint: () => undefined,
            dropUniqueConstraints: () => undefined,
            createCheckConstraint: () => undefined,
            createCheckConstraints: () => undefined,
            dropCheckConstraint: () => undefined,
            dropCheckConstraints: () => undefined,
            createExclusionConstraint: () => undefined,
            createExclusionConstraints: () => undefined,
            dropExclusionConstraint: () => undefined,
            dropExclusionConstraints: () => undefined,
            createForeignKey: () => undefined,
            createForeignKeys: () => undefined,
            dropForeignKey: () => undefined,
            dropForeignKeys: () => undefined,
            createIndex: () => undefined,
            createIndices: () => undefined,
            dropIndex: () => undefined,
            dropIndices: () => undefined,
            clearTable: () => undefined,
            enableSqlMemory: () => undefined,
            disableSqlMemory: () => undefined,
            clearSqlMemory: () => undefined,
            getMemorySql: () => class_transformer.plainToClass(SqlInMemory.SqlInMemory, {}),
            executeMemoryUpSql: () => undefined,
            executeMemoryDownSql: () => undefined,
        });
    });
    test('1', async () => {
        let object2 = [class_transformer.plainToClass(View.View, {})];
        let object = [class_transformer.plainToClass(typeorm.Table, {})];
        await inst.up({
            connection: class_transformer.plainToClass(Connection.Connection, {}),
            broadcaster: class_transformer.plainToClass(Broadcaster.Broadcaster, {}),
            manager: class_transformer.plainToClass(EntityManager.EntityManager, {}),
            isReleased: false,
            isTransactionActive: false,
            data: {},
            loadedTables: object,
            loadedViews: object2,
            connect: () => 'https://croplands.org/app/a/reset?token=',
            release: () => undefined,
            clearDatabase: () => undefined,
            startTransaction: () => undefined,
            commitTransaction: () => undefined,
            rollbackTransaction: () => undefined,
            query: () => class_transformer.plainToClass(QueryResult.QueryResult, {}),
            stream: () => class_transformer.plainToClass(fs.ReadStream, {}),
            getDatabases: () => [
                'http://example.com/showcalendar.html?token=CKF50YzIHxCTKMAg',
            ],
            getSchemas: () => [
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
            ],
            getTable: () => undefined,
            getTables: () => [],
            getView: () => undefined,
            getViews: () => [],
            getReplicationMode: () => 'slave',
            hasDatabase: () => false,
            getCurrentDatabase: () => undefined,
            hasSchema: () => true,
            getCurrentSchema: () => undefined,
            hasTable: () => true,
            hasColumn: () => true,
            createDatabase: () => undefined,
            dropDatabase: () => undefined,
            createSchema: () => undefined,
            dropSchema: () => undefined,
            createTable: () => undefined,
            dropTable: () => undefined,
            createView: () => undefined,
            dropView: () => undefined,
            renameTable: () => undefined,
            addColumn: () => undefined,
            addColumns: () => undefined,
            renameColumn: () => undefined,
            changeColumn: () => undefined,
            changeColumns: () => undefined,
            dropColumn: () => undefined,
            dropColumns: () => undefined,
            createPrimaryKey: () => undefined,
            updatePrimaryKeys: () => undefined,
            dropPrimaryKey: () => undefined,
            createUniqueConstraint: () => undefined,
            createUniqueConstraints: () => undefined,
            dropUniqueConstraint: () => undefined,
            dropUniqueConstraints: () => undefined,
            createCheckConstraint: () => undefined,
            createCheckConstraints: () => undefined,
            dropCheckConstraint: () => undefined,
            dropCheckConstraints: () => undefined,
            createExclusionConstraint: () => undefined,
            createExclusionConstraints: () => undefined,
            dropExclusionConstraint: () => undefined,
            dropExclusionConstraints: () => undefined,
            createForeignKey: () => undefined,
            createForeignKeys: () => undefined,
            dropForeignKey: () => undefined,
            dropForeignKeys: () => undefined,
            createIndex: () => undefined,
            createIndices: () => undefined,
            dropIndex: () => undefined,
            dropIndices: () => undefined,
            clearTable: () => undefined,
            enableSqlMemory: () => undefined,
            disableSqlMemory: () => undefined,
            clearSqlMemory: () => undefined,
            getMemorySql: () => class_transformer.plainToClass(SqlInMemory.SqlInMemory, {}),
            executeMemoryUpSql: () => undefined,
            executeMemoryDownSql: () => undefined,
        });
    });
    test('2', async () => {
        let object3 = [
            class_transformer.plainToClass(typeorm.Table, {}),
            class_transformer.plainToClass(typeorm.Table, {}),
        ];
        let object2 = [
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
        ];
        let object = [
            class_transformer.plainToClass(typeorm.Table, {}),
            class_transformer.plainToClass(typeorm.Table, {}),
        ];
        await inst.up({
            connection: class_transformer.plainToClass(Connection.Connection, {}),
            broadcaster: class_transformer.plainToClass(Broadcaster.Broadcaster, {}),
            manager: class_transformer.plainToClass(EntityManager.EntityManager, {}),
            isReleased: true,
            isTransactionActive: false,
            data: { key2: 'Hello, world!', key0: 'George', key1: 'foo bar' },
            loadedTables: object,
            loadedViews: object2,
            connect: () => 'http://www.croplands.org/account/confirm?t=',
            release: () => undefined,
            clearDatabase: () => undefined,
            startTransaction: () => undefined,
            commitTransaction: () => undefined,
            rollbackTransaction: () => undefined,
            query: () => class_transformer.plainToClass(QueryResult.QueryResult, {}),
            stream: () => class_transformer.plainToClass(fs.ReadStream, {}),
            getDatabases: () => [
                'http://www.croplands.org/account/confirm?t=',
                'https://accounts.google.com/o/oauth2/revoke?token=%s',
                'https://api.telegram.org/',
            ],
            getSchemas: () => [
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
            ],
            getTable: () => undefined,
            getTables: () => object3,
            getView: () => undefined,
            getViews: () => [null],
            getReplicationMode: () => 'slave',
            hasDatabase: () => false,
            getCurrentDatabase: () => 'http://example.com/showcalendar.html?token=CKF50YzIHxCTKMAg',
            hasSchema: () => true,
            getCurrentSchema: () => 'http://example.com/showcalendar.html?token=CKF50YzIHxCTKMAg',
            hasTable: () => true,
            hasColumn: () => true,
            createDatabase: () => undefined,
            dropDatabase: () => undefined,
            createSchema: () => undefined,
            dropSchema: () => undefined,
            createTable: () => undefined,
            dropTable: () => undefined,
            createView: () => undefined,
            dropView: () => undefined,
            renameTable: () => undefined,
            addColumn: () => undefined,
            addColumns: () => undefined,
            renameColumn: () => undefined,
            changeColumn: () => undefined,
            changeColumns: () => undefined,
            dropColumn: () => undefined,
            dropColumns: () => undefined,
            createPrimaryKey: () => undefined,
            updatePrimaryKeys: () => undefined,
            dropPrimaryKey: () => undefined,
            createUniqueConstraint: () => undefined,
            createUniqueConstraints: () => undefined,
            dropUniqueConstraint: () => undefined,
            dropUniqueConstraints: () => undefined,
            createCheckConstraint: () => undefined,
            createCheckConstraints: () => undefined,
            dropCheckConstraint: () => undefined,
            dropCheckConstraints: () => undefined,
            createExclusionConstraint: () => undefined,
            createExclusionConstraints: () => undefined,
            dropExclusionConstraint: () => undefined,
            dropExclusionConstraints: () => undefined,
            createForeignKey: () => undefined,
            createForeignKeys: () => undefined,
            dropForeignKey: () => undefined,
            dropForeignKeys: () => undefined,
            createIndex: () => undefined,
            createIndices: () => undefined,
            dropIndex: () => undefined,
            dropIndices: () => undefined,
            clearTable: () => undefined,
            enableSqlMemory: () => undefined,
            disableSqlMemory: () => undefined,
            clearSqlMemory: () => undefined,
            getMemorySql: () => class_transformer.plainToClass(SqlInMemory.SqlInMemory, {}),
            executeMemoryUpSql: () => undefined,
            executeMemoryDownSql: () => undefined,
        });
    });
    test('3', async () => {
        let object3 = [
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
        ];
        let object2 = [
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
        ];
        let object = [
            class_transformer.plainToClass(typeorm.Table, {}),
            class_transformer.plainToClass(typeorm.Table, {}),
        ];
        await inst.up({
            connection: class_transformer.plainToClass(Connection.Connection, {}),
            broadcaster: class_transformer.plainToClass(Broadcaster.Broadcaster, {}),
            manager: class_transformer.plainToClass(EntityManager.EntityManager, {}),
            isReleased: false,
            isTransactionActive: true,
            data: { key0: 'Edmond', key1: 'Hello, world!' },
            loadedTables: object,
            loadedViews: object2,
            connect: () => 'http://base.com',
            release: () => undefined,
            clearDatabase: () => undefined,
            startTransaction: () => undefined,
            commitTransaction: () => undefined,
            rollbackTransaction: () => undefined,
            query: () => class_transformer.plainToClass(QueryResult.QueryResult, {}),
            stream: () => class_transformer.plainToClass(fs.ReadStream, {}),
            getDatabases: () => [
                'http://www.example.com/route/123?foo=bar',
                'www.google.com',
                'https://twitter.com/path?abc',
                'https://twitter.com/path?abc',
            ],
            getSchemas: () => [
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
            ],
            getTable: () => undefined,
            getTables: () => [],
            getView: () => undefined,
            getViews: () => object3,
            getReplicationMode: () => 'slave',
            hasDatabase: () => false,
            getCurrentDatabase: () => 'http://www.croplands.org/account/confirm?t=',
            hasSchema: () => false,
            getCurrentSchema: () => undefined,
            hasTable: () => false,
            hasColumn: () => false,
            createDatabase: () => undefined,
            dropDatabase: () => undefined,
            createSchema: () => undefined,
            dropSchema: () => undefined,
            createTable: () => undefined,
            dropTable: () => undefined,
            createView: () => undefined,
            dropView: () => undefined,
            renameTable: () => undefined,
            addColumn: () => undefined,
            addColumns: () => undefined,
            renameColumn: () => undefined,
            changeColumn: () => undefined,
            changeColumns: () => undefined,
            dropColumn: () => undefined,
            dropColumns: () => undefined,
            createPrimaryKey: () => undefined,
            updatePrimaryKeys: () => undefined,
            dropPrimaryKey: () => undefined,
            createUniqueConstraint: () => undefined,
            createUniqueConstraints: () => undefined,
            dropUniqueConstraint: () => undefined,
            dropUniqueConstraints: () => undefined,
            createCheckConstraint: () => undefined,
            createCheckConstraints: () => undefined,
            dropCheckConstraint: () => undefined,
            dropCheckConstraints: () => undefined,
            createExclusionConstraint: () => undefined,
            createExclusionConstraints: () => undefined,
            dropExclusionConstraint: () => undefined,
            dropExclusionConstraints: () => undefined,
            createForeignKey: () => undefined,
            createForeignKeys: () => undefined,
            dropForeignKey: () => undefined,
            dropForeignKeys: () => undefined,
            createIndex: () => undefined,
            createIndices: () => undefined,
            dropIndex: () => undefined,
            dropIndices: () => undefined,
            clearTable: () => undefined,
            enableSqlMemory: () => undefined,
            disableSqlMemory: () => undefined,
            clearSqlMemory: () => undefined,
            getMemorySql: () => class_transformer.plainToClass(SqlInMemory.SqlInMemory, {}),
            executeMemoryUpSql: () => undefined,
            executeMemoryDownSql: () => undefined,
        });
    });
    test('4', async () => {
        let object3 = [
            class_transformer.plainToClass(typeorm.Table, {}),
            class_transformer.plainToClass(typeorm.Table, {}),
        ];
        let object2 = [
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
            class_transformer.plainToClass(View.View, {}),
        ];
        let object = [
            class_transformer.plainToClass(typeorm.Table, {}),
            class_transformer.plainToClass(typeorm.Table, {}),
        ];
        await inst.up({
            connection: class_transformer.plainToClass(Connection.Connection, {}),
            broadcaster: class_transformer.plainToClass(Broadcaster.Broadcaster, {}),
            manager: class_transformer.plainToClass(EntityManager.EntityManager, {}),
            isReleased: true,
            isTransactionActive: false,
            data: { key2: 'Foo bar', key0: 'Jean-Philippe', key1: 'Hello, world!' },
            loadedTables: object,
            loadedViews: object2,
            connect: () => 'http://base.com',
            release: () => undefined,
            clearDatabase: () => undefined,
            startTransaction: () => undefined,
            commitTransaction: () => undefined,
            rollbackTransaction: () => undefined,
            query: () => class_transformer.plainToClass(QueryResult.QueryResult, {}),
            stream: () => class_transformer.plainToClass(fs.ReadStream, {}),
            getDatabases: () => [
                'http://www.croplands.org/account/confirm?t=',
                'ponicode.com',
                'http://example.com/showcalendar.html?token=CKF50YzIHxCTKMAg',
            ],
            getSchemas: () => [
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
                'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22NaN%22%20y%3D%22NaN%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%3C%2Fsvg%3E',
            ],
            getTable: () => undefined,
            getTables: () => object3,
            getView: () => undefined,
            getViews: () => [null],
            getReplicationMode: () => 'slave',
            hasDatabase: () => true,
            getCurrentDatabase: () => 'Www.GooGle.com',
            hasSchema: () => false,
            getCurrentSchema: () => 'http://example.com/showcalendar.html?token=CKF50YzIHxCTKMAg',
            hasTable: () => false,
            hasColumn: () => true,
            createDatabase: () => undefined,
            dropDatabase: () => undefined,
            createSchema: () => undefined,
            dropSchema: () => undefined,
            createTable: () => undefined,
            dropTable: () => undefined,
            createView: () => undefined,
            dropView: () => undefined,
            renameTable: () => undefined,
            addColumn: () => undefined,
            addColumns: () => undefined,
            renameColumn: () => undefined,
            changeColumn: () => undefined,
            changeColumns: () => undefined,
            dropColumn: () => undefined,
            dropColumns: () => undefined,
            createPrimaryKey: () => undefined,
            updatePrimaryKeys: () => undefined,
            dropPrimaryKey: () => undefined,
            createUniqueConstraint: () => undefined,
            createUniqueConstraints: () => undefined,
            dropUniqueConstraint: () => undefined,
            dropUniqueConstraints: () => undefined,
            createCheckConstraint: () => undefined,
            createCheckConstraints: () => undefined,
            dropCheckConstraint: () => undefined,
            dropCheckConstraints: () => undefined,
            createExclusionConstraint: () => undefined,
            createExclusionConstraints: () => undefined,
            dropExclusionConstraint: () => undefined,
            dropExclusionConstraints: () => undefined,
            createForeignKey: () => undefined,
            createForeignKeys: () => undefined,
            dropForeignKey: () => undefined,
            dropForeignKeys: () => undefined,
            createIndex: () => undefined,
            createIndices: () => undefined,
            dropIndex: () => undefined,
            dropIndices: () => undefined,
            clearTable: () => undefined,
            enableSqlMemory: () => undefined,
            disableSqlMemory: () => undefined,
            clearSqlMemory: () => undefined,
            getMemorySql: () => class_transformer.plainToClass(SqlInMemory.SqlInMemory, {}),
            executeMemoryUpSql: () => undefined,
            executeMemoryDownSql: () => undefined,
        });
    });
    test('5', async () => {
        await inst.up({
            connection: class_transformer.plainToClass(Connection.Connection, {}),
            broadcaster: class_transformer.plainToClass(Broadcaster.Broadcaster, {}),
            manager: class_transformer.plainToClass(EntityManager.EntityManager, {}),
            isReleased: true,
            isTransactionActive: false,
            data: {},
            loadedTables: [],
            loadedViews: [],
            connect: () => '',
            release: () => undefined,
            clearDatabase: () => undefined,
            startTransaction: () => undefined,
            commitTransaction: () => undefined,
            rollbackTransaction: () => undefined,
            query: () => class_transformer.plainToClass(QueryResult.QueryResult, {}),
            stream: () => class_transformer.plainToClass(fs.ReadStream, {}),
            getDatabases: () => [],
            getSchemas: () => [],
            getTable: () => undefined,
            getTables: () => [],
            getView: () => undefined,
            getViews: () => [],
            getReplicationMode: () => 'slave',
            hasDatabase: () => false,
            getCurrentDatabase: () => undefined,
            hasSchema: () => true,
            getCurrentSchema: () => undefined,
            hasTable: () => true,
            hasColumn: () => false,
            createDatabase: () => undefined,
            dropDatabase: () => undefined,
            createSchema: () => undefined,
            dropSchema: () => undefined,
            createTable: () => undefined,
            dropTable: () => undefined,
            createView: () => undefined,
            dropView: () => undefined,
            renameTable: () => undefined,
            addColumn: () => undefined,
            addColumns: () => undefined,
            renameColumn: () => undefined,
            changeColumn: () => undefined,
            changeColumns: () => undefined,
            dropColumn: () => undefined,
            dropColumns: () => undefined,
            createPrimaryKey: () => undefined,
            updatePrimaryKeys: () => undefined,
            dropPrimaryKey: () => undefined,
            createUniqueConstraint: () => undefined,
            createUniqueConstraints: () => undefined,
            dropUniqueConstraint: () => undefined,
            dropUniqueConstraints: () => undefined,
            createCheckConstraint: () => undefined,
            createCheckConstraints: () => undefined,
            dropCheckConstraint: () => undefined,
            dropCheckConstraints: () => undefined,
            createExclusionConstraint: () => undefined,
            createExclusionConstraints: () => undefined,
            dropExclusionConstraint: () => undefined,
            dropExclusionConstraints: () => undefined,
            createForeignKey: () => undefined,
            createForeignKeys: () => undefined,
            dropForeignKey: () => undefined,
            dropForeignKeys: () => undefined,
            createIndex: () => undefined,
            createIndices: () => undefined,
            dropIndex: () => undefined,
            dropIndices: () => undefined,
            clearTable: () => undefined,
            enableSqlMemory: () => undefined,
            disableSqlMemory: () => undefined,
            clearSqlMemory: () => undefined,
            getMemorySql: () => class_transformer.plainToClass(SqlInMemory.SqlInMemory, {}),
            executeMemoryUpSql: () => undefined,
            executeMemoryDownSql: () => undefined,
        });
    });
});
//# sourceMappingURL=1638046137183-CreateUserTable.test.js.map